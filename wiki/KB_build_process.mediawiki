---
title: KB build process
---

The Phenoscape KB build process goes through several steps in converting input data sources to a queryable knowledgebase. This page provides some description for each of the steps, most or all of which are implemented in the [https://github.com/phenoscape/phenoscape-owl-tools phenoscape-owl-tools] project.

==OWL conversion==
The Phenoscape Knowledgebase works as a single unified OWL model. While some inputs (e.g. the shared ontologies such as [http://uberon.org/ Uberon] and [http://purl.obolibrary.org/obo/pato PATO]) are natively distributed as OWL documents, others are converted to OWL from some other representation. In doing so the inputs are, as far as possible, converted to a shared data model. EQ annotations are converted to a specific semantic representation.

==Identifier cleanup==
Several standard OWL properties (''part_of'', ''has_part'', ''develops_from'', etc.) are conceptually shared across ontology and annotation resources, facilitating data integration. However, unlike class identifiers, identifiers for properties are often not standardized and they may not properly reference shared terms (usually because of poor tool support rather than user intent). We maintain a [https://github.com/phenoscape/phenoscape-owl-tools/blob/master/src/main/scala/org/phenoscape/owl/PropertyNormalizer.scala table of "alternative" URIs] for common properties as we observe them in our data inputs. We could create equivalence axioms between these, but instead we just standardize all incoming content. This saves the reasoner some work and also makes it much easier to query across data using standard URIs, especially when not using a reasoner.

==Axiom generation==
* "Absence" classes for OWL EL negation classification workaround
* General class axiom rules for presenceâ€“absence inference over part_of, develops_from
* SPARQL facilitation (e.g. materialized existential hierarchies such as part_of)

==Materialization of inferred axioms==
ELK reasoner using extracted tbox axioms only (not feasible with individuals included).

==Assertion of absence hierarchy==
Based on inverse of hierarchy of negated classes computed by ELK.

[[Category:Reasoning]]
[[Category:Database]]
[[Category:Informatics]]
[[Category:Identifiers]]
[[Category:Software]]