---
title: ORB term request prototype
---

== Introduction ==

The vision of this project is to develop an application that will allow data curators to use new ontology terms without creating a workflow bottleneck.

=== Background ===
There is a need for applications that will expedite the annotation of phenotypic characters using ontologies and also promote community participation in the expansion and refinement of ontologies.  One particular need that has arisen within Phenoscape and other projects is for an Ontology Request Broker (ORB), an application that can launch new ontology term requests within existing data curation workflows, record term provenance and community discussion, enable temporary terms to be used in data annotation, and update temporary terms once a request has been resolved.

=== Scope ===

Here is a documentation of ORB term request service. ORB will be accessible via an online interface and programmatically through RESTful web-services.

=== ORB architecture overview ===
[[Image:ORB_arch.jpg]]



==Use cases==
'''Use cases diagram'''
[[Image:ORB use cases.jpg]]

----
'''Case:Register'''
Brief: This is a use case for creating an account in ORB

Actor:ORB user

Pre-condition: The user is at the ORB site

Ideal path
The process is initiated when the user selects the registration link
# ORB presents the registration page
# User provides required fields(e-mail,name, password and country)
# User submits his/her information
# ORB verifies the request
# ORB informs the user of successful registration and provides an activation link
# ORB sends the registration information to the user's e-mail account


Alternative path
Invalid request: This occurs when a user submits a request with missing required information
*1. The steps 1 to 4 in the ideal path apply
*2. ORB terminates the registration
*3. ORB returns to the registration page with the missing field highlighted

Invalid e-mail address: This occurs when a user provides an invalid e-mail address
*1. The steps 1 to 4 in the ideal path apply
*2. ORB terminates the registration
*3. ORB informs user the e-mail address is invalid
*4. ORB returns the registration page


----
'''Case:SubmitTerm'''

Brief: This is a use case  for submitting new ontology term requests.

Actor: TermRequester

Pre-conditions: The requester must be at the ORB website and has an account

Ideal path:
*1. This use case is initiated when the requester clicks on the term submission tab
*2. ORB presents the user login page for the requester to fill in the name and password
*3. ORB verifies the requester
*4. ORB displays the term submission page
*5. Requester provides the required fields(i.e term's name, parent, textual definition,target ontology) plus any additional information related to the term (i.e other relations, references, database cross references, comments etc) and submits
*6. ORB verifies the submission
*7. ORB assigns a temporary ID to the term and presents it the requester
*8. ORB sends the requested term's temporary ID and other details to requester's e-mail account
*9. ORB returns to the term submission page

Alternative paths:

Invalid request: This occurs if the user submits a request without the required fields
*1. Steps 1 to 6 as described in the ideal path will apply
*2. ORB will the terminate the request
*3. ORB will return to the term submission page with the missing required field highlighted

Matching term found: This occurs when the requested term already exists in the targetted ontology
*1. Steps 1 to 6 as described in the ideal path will apply
*2.ORB returns a message informing the requester that the term exists
*3. ORB returns the matching term's id, name and parent to the requester

----
'''Case: EditTerm'''

Brief: This is a use case for editing requested term

Actor: TermRequester and OntologyGateKeeper

Pre-conditions
*The term exists in ORB database
*The term has not been resolved
*The term editor is at the specific term's page

Ideal path:
This case is initiated when the TermRequester/OntologyGateKeeper selects the "edit term" link
*1. ORB presents the user login page
*2. User provides their name and password
*3. ORB verifies the user
*4. ORB presents the term with the editable fields
*5. User makes any changes and submits
*6. ORB verifies the changes made
*7. ORB updates changes
*8. ORB informs user of successful update
*9. ORB displays the term plus the new changes

Alternative paths:

User not registered
*1. Steps 1 to 3 as described in the ideal path apply
*2. ORB terminates the process
*3. ORB informs the user that they are not registered or need to try again in case of misspelled login details
*4. ORB presents the ORB registration page


User neither the requester of the term nor gatekeeper for the target ontology
*1. Steps 1 to 3 as described in the ideal path apply
*2. ORB terminates the process
*3. ORB informs the user that they need to be the term's requester or ontology gatekeeper to edit the term
*4. ORB returns to the term page

----
'''Case:ChangeTermStatus'''

Brief: This is a use case for changing the status a term submitted

Actor: OntologyGateKeeper

Pre-condition:
The user is at the specific term page

Ideal path
This case is initiated when the user,selects the "change term status" link
*1. ORB presents the user login page
*2. User provides their name and password
*3. ORB verifies the user
*4. ORB presents the term with the editable status fields
*5. User selects the new status and submits
*7. ORB updates changes
*8. ORB informs user of successful update
*9. ORB displays the term plus the updated status

Alternative paths

Invalid OntologyGateKeeper
*1. Steps 1 to 3 as described in the ideal path will apply
*2. ORB terminates the request
*3. ORB informs the user that they aren't the ontology gatekeeper or they may try again in case of misspelled login information
*4. ORB returns to term page

Resolved term status: This applies when a term has already been resolved and assigned a permanent ID
*1. Steps 1 to 3 as described in the ideal path will apply
*2. ORB terminates the request
*3. ORB informs the user that the term has been resolved
*4. ORB returns to the term page
----
'''Case:BrowseTerms'''

Actor: CasualUser

Brief:This is a case for user who is navigating the ORB site

Pre-Condition:
*The user is online at the ORB site

Ideal path
*1. The user selects the "browse terms" link
*2. ORB displays the ORB browse term page
*3. User selects whether to view all terms or based on status
*4. ORB displays the terms name , ID , target ontology, status and a link to the terms page

Alternative paths:

'''Case: DownloadTerms'''

Brief: Use case for downloading terms

*1. Steps 1 to 4 as described in the ideal path apply
*2. User selects the terms to be downloaded
*3. User selects the download tab
*4. ORB generates a text file containing the terms in OBO format
*5. ORB returns to the page displaying downloaded terms


Download a term: Applicable when user wants to download a single term
*1. The steps 1 to 4 as described in the ideal path apply.
*2. User selects the term page link
*3. ORB displays the term page with all the term's information
*4. User selects the term download tab
*5. ORB generates a file containing the term in OBO format
*6. ORB returns to the term's page

'''Case: SearchTerm'''
Brief: A case for user to search for a term

Ideal path:

*1. User selects the search term link
*2. ORB displays the term search page
*3. User provides the term name or id or parent
*4. User selects the submit button
*5. ORB returns a term with the name,synonyms or id matching the information provided in step 3

Alternative path:

No term matching the search
*1. Steps 1 to 3 as described in the ideal path apply
*2. ORB returns a term not found message

'''Case: Comment'''

Pre-condition:
User is at the specific term's page

Ideal path
*1. User selects the "comment on term" link
*2. ORB provides a page for submitting a comment
*3. User provides comment in the term comment field
*4. User provides name and e-mail
*5. ORB validates the user e-mail
*5. User submits the comment
*6. ORB generates a comment submission success message
*7. ORB returns to the term page

Alternative path

User e-mail invalid

*1. Steps 1 to 5 as described in the ideal path apply
*2. ORB terminates the comment submission process
*3. ORB informs user about the invalid e-mail address
*4. ORB returns to the term comment submission page

----


'''Case: DevelopOrb'''

Actor: Developer

Brief: This is a case for users who have skills in application development and are interested in developing ORB further

Pre-conditions:


Ideal path:

Alternative paths:


----


'''Case:IntegrateOrb'''

Actor : Developer


Brief: This is a case for users who have skills in application development and are interested in integrating ORB into existing application e.g to form a workflow.

Pre-conditions:

Ideal path:

Alternative path:

----

==Non-functional requirements ==
'''Accessibility'''
*ORB will have a web interface for easy access via browsers
*It will also have REST-style web service for programmatic access
*The prototype will be integrated into [https://www.phenoscape.org/wiki/Phenex Phenex] as a demonstration of an interfaceable API.

'''Support'''

**A comprehensive documentation on ORB's functions(how to..),implementation and help pages
**Registration and extensive documentation at [http://sourceforge.net/ sourceforge], [http://www.biocatalogue.org/ Biocatalogue] and [https://www.phenoscape.org/wiki/Main_Page Phenoscape wiki]
**Have a bug tracking and feature request mechanism

==Specification==

==Activity==

==Database schema==

[[Image:ORB schema.png]]

==Services==
Here is a list of all the web-services provided by ORB. The base URI (represented as <BASE> in the services URIs) is: /orbprototype/

==Get all terms in html format==
<BASE>terms/?media=htm

==Get all terms in xml format==
<BASE>terms/?media=xml

==Get all obsoleted terms in htm format==
<BASE>terms/obsolete/?media=htm

==Get all obsoleted terms in xml format==
<BASE>terms/obsolete/?media=xml

==Get all terms from an ontology with an ontology_identifier(name of ontology or prefix) in html format==
<BASE>terms/ontology/{ontology_identifier}/?media=htm

== Get all terms from an ontology with an ontology_identifier(name of ontology or prefix) in xml format==
<BASE>terms/ontology/{ontology_identifier}/?media=xml

==Get all pending terms in html format==
<BASE>terms/pending/?media=htm

==Get all pending terms in xml format==
<BASE>terms/pending/?media=xml

== Get all terms in html format using publication_identifier(publication's DOI or title)==
/orbprototype/terms/publication/{publication_identifier}/?media=htm

== Get all terms in xml format using publication_identifier(publication's DOI or title)==
/orbprototype/terms/publication/{publication_identifier}/?media=xml

== Get all terms in html format requested by {requester_identifier}. The requester_identifier is a text which could be the requester's name or e-mail==
/orbprototype/terms/requester/{requester_identifier}/?media=htm

==Get all terms in xml format requested by {requester_identifier}. The requester_identifier is a text which could be the requester's name or e-mail==
/orbprototype/terms/requester/{requester_identifier}/?media=xml

== Get all resolved terms in html format==
http://localhost:8008/orbprototype/terms/resolved/?media=htm

== Get all resolved terms in xml format==
http://localhost:8008/orbprototype/terms/resolved/?media=xml

== Get most commented terms in html format==
http://localhost:8008/orbprototype/terms/top/?media=htm

== Get most commented terms in xml format==
http://localhost:8008/orbprototype/terms/top/?media=xml

== Get all trial terms in html format==
http://localhost:8008/orbprototype/terms/trial/?media=htm

== Get all trial terms in xml format==
http://localhost:8008/orbprototype/terms/trial/?media=xml

== Search term using orbid in XML format and return in xml format. {orbit} is variable==
POST /orbprototype/terms/search/?media=xml HTTP/1.1
<search>
<term_identifier>orbid</term_identifier>
<term_identifier_value>{orbid}</term_identifier_value>
</search>

21. Search term using term name(i.e terminate) in XML and return in xml format. {terminate} is variable and is 
POST /orbprototype/terms/search/?media=xml HTTP/1.1

<search>
<term_identifier>termname</term_identifier>
<term_identifier_value>{terminame}</term_identifier_value>
</search>

22. Search term using a definition and return the matching term(s) in xml format
POST /orbprototype/terms/search/?media=xml HTTP/1.1

== Project plan ==
''An agile approach will be used in ORB development. The sign √ indicates accomplished tasks while * indicates tasks which ought to have been implemented but haven't been''

'''Week 1: 4 to 9 January, 2010'''
To review the ORB project, suggest any changes in light of existing technologies from literature review and input from the team and document the (including the changes).
*Revise the ORB project plan and milestones√
*Identify a suitable citation management tool and learn how to utilize it√
*Perform a comprehensive literature search and read the relevant papers and add to the ORB literature review√


'''Week 2: 10 to 16 January, 2010'''
Complete literature review, document and discuss with project team
*Perform further literature search, read and complete literature review√
*Document the project requirements (technologies to be used, architecture, behavior) in the project wiki√
*Hold an online meeting with NESCent team about progress and ORB implementation based on literature review and existing technologies√


'''Week 3: 17 to 23 January, 2010'''
Document ORB requirements and specification based on input from literature, discussion and research
*Revise the ORB requirements, specification and document it to the wiki√


'''Week 4: 24 to 30 January, 2010'''
Revise, design and implement ORB data layer based on existing technologies, input from project team and implement the database.
*Design and implement the ORB database
*Document the ORB database schema


'''Week 5: 31st January to 6th February 2010'''
Design and implement ORB Application layer
*Identify and document the role of each server application
*Start implementing/coding the application layer


'''Week 6: 7 to 13 February, 2010'''
Continue implementing the application layer plus the unit test
*Continue implementing the application layer and unit tests


'''Week 7: 14 to 20 February, 2010'''
Continue implementing the application layer plus the unit test
*Continue implementing the application layer and unit tests


'''Week 8: 21 to 27 February, 2010'''
Continue implementing the application layer plus the unit test
*Continue implementing the application layer and unit tests


'''Week 9:  28th February to 6th March 2010'''
Continue implementing the application layer plus the unit test
*Continue implementing the application layer and unit tests

'''Week 10: 7th to 13th March 2010'''
Start working on the ORB user/client interface
*Identify and describe the user/client interface
*Begin implementing the user/client interface

'''Week 12: 21st to 27th March 2010'''
*Continue working on the user/client interface

'''Week 13: 28th March to 3rd April 2010'''
*Continue working on the user/client interface


'''Week 14: 4th to 10th April 2010'''
*Continue working on the user/client interface


'''Week 15: 11th to 17th April, 2010'''
*Continue working on the user/client interface


'''Week 16: 18th to 24th April, 2010'''
*Continue working on the user/client interface


'''Week 17: 25th April to 1st May 2010'''
Complete the ORB application
*Assemble all the ORB components and have a complete software
*Refine the code implementation and fix any bugs

'''Week 18: 2nd to 8th May 2010'''
Refinement and fix bugs
*Continue fixing bugs

'''Week 19: 9th to 15th May, 2010'''
Begin deployment
*Deploy ORB to a publicly accessible server
*Document ORB server

'''Week 20: 16th to 22nd May, 2010'''
 *To be added

'''Week 21: 23rd to 29th May, 2010'''
  *To be added

'''Week 22: 30th to 31st May, 2010'''

==Meetings==

'''Jan 19, 2010'''
(notes by Mtakai)

'''Present'''
**Paula Mabee
**Hilmar Lapp
**Wasila Dahdul
**Jim Bahloff
**Peter Midford
**Mtakai Ngara

'''Agenda'''
*
**ORB requirements
**Working modalities
*

'''Minutes'''
**ORB will be accessible via browsers and programmatically as REST web services.
**Term requester and Ontology gatekeepers must create an account at the site.
**A function to allow for submission of a term to multiple ontologies would useful.
**Apart from term submission, definition revision, term obsoletion and graph placement should be implemented.
**The users are categorized as:requester, ontology gatekeeper,developers, casual user and the community at large. A casual user need not register at the site.Visit [https://www.phenoscape.org/wiki/ORB_term_request_prototype#Requirements requirements] section for details on each of the users' role(s).
**Function for uploading a file and downloading terms to be implemented
**Have a section within ORB site for updates on latest acivities
**Integrate ORB into phenex
**Host the ORB project at sourceforge on it's page
**Have a mechanism of checking if a term already exists in an ontology
**Communication via e-mail
**ORB meetings after each use case implementation
**Code will be shared via subversion repository for team review

*Action items
**Contact the Berkley group (BBPO) on ORB trial
**Have screen shots of ORB uploaded in the wiki to demonstrate functionality

== Links & Resources ==

* Early and incomplete [http://geneontology.cvs.sourceforge.net/viewvc/geneontology/go-dev/amigo/amigo/cgi-bin/experimental/orb?revision=1.1&view=markup ORB implementation in Perl] by Seth Carbon. This interfaces directly with the SourceForge tracker.


* [http://www.ebi.ac.uk/ontology-lookup/ Ontology Lookup services ]

== Contacts ==
Name: Mtakai Ngara

E-mail: mtakai@nescent.org

[[Category:Informatics]]
[[Category:Ontology]]
[[Category:Curation]]