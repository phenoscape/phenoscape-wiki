---
title: Absence Phenotypes in OWL
---

Phenotypes describing the absence of a type of structure require particular consideration for both semantic modeling and reasoning.

==Basic EQ modeling==
We generally represent phenotypes as classes describing relationships between an entity and a quality. The entity is usually an anatomical structure, such as a '''dorsal fin''', which is the ''bearer_of'' some quality, such as an instance of '''serrated'''. The inverse of ''bearer_of'' is ''inheres_in'', so we can either describe the set of organisms with this phenotype:

<blockquote><tt>''has_part'' some ('''dorsal fin''' and ''bearer_of'' some '''serrated''')</tt></blockquote>

or describe this class of phenotypes (from the perspective of the quality):

<blockquote><tt>'''serrated''' and ''inheres_in'' some '''dorsal fin'''</tt></blockquote>

These expressions are not equivalent but describe different aspects of the same data model.

=="Absent" quality==
The PATO ontology of phenotypic qualities includes a commonly used quality '''absent'''. However, using this term in the above EQ model is problematic. For the entity '''dorsal fin''' and the quality '''absent''', we would end up with an expression such as:

<blockquote><tt>''has_part'' some ('''dorsal fin''' and ''bearer_of'' some '''absent''')</tt></blockquote>

The obvious problem is that this asserts the existence of a '''dorsal fin''', needed to bear the instance of '''absent'''.

Additionally, reasoning with these classes produces unintuitive results. An organism with no dorsal fin would be described as <tt>''has_part'' some '''dorsal fin''' and ''bearer_of'' some '''absent'''</tt>. An organism with no fins at all would be in the class <tt>''has_part'' some '''fin''' and ''bearer_of'' some '''absent'''</tt>. An OWL reasoner would correctly infer that the former is a subclass of the latter, which is the opposite of what we really intend (organisms without dorsal fins are subset of the organisms without any fins).

==Using OWL class complements or cardinality==
Instead of representing absence with a quality, we can describe it in OWL using a class complement (logical negation):

<blockquote><tt>not (''has_part'' some '''dorsal fin''')</tt></blockquote>

This results in reasoning that matches our expectations: <tt>not (''has_part'' some '''fin''')</tt> is a subclass of <tt>not (''has_part'' some '''dorsal fin''')</tt>. Also, we don't need to infer the existence of a structure that is supposed to be absent. However, this approach introduces two difficulties. First, we lose the ability to directly describe the phenotypic quality (there is no instance of "absence" to refer to; we are instead describing the organism or structure). This can be problematic when the application otherwise presents or queries for phenotypes as qualities. Second, complement expressions are not available within the OWL EL profile. Reasoning with such expressions requires a complete OWL DL reasoner, which is far less scalable.

We could also use a cardinality expression:

<blockquote><tt>''has_part'' exactly 0 '''dorsal fin'''</tt></blockquote>

This is logically equivalent to the complement expression, and cardinality expressions present the same difficulties just described. Also, while cardinalities other than 0 can be used to express counts, transitive properties such as ''has_part'' cannot be used in cardinality expressions.

=="Lacks all parts of type" quality==
The solution provided by PATO for the above problem is the "relational" quality '''lacks all parts of type'''. Relational qualities in PATO are qualities that are further specified by a relation to another class, for example '''sensitivity''' toward '''ultraviolet light'''. So instead of describing an entity '''dorsal fin''' which bears an '''absent''' quality, we should instead describe the entity '''body''' which bears a quality '''lacks all parts of type''' toward '''dorsal fin'''.